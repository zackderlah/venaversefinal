// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  username     String    @unique
  password     String
  profileImage String?   // URL to the profile image
  bio          String?   // User bio
  favoriteReviewId Int?  @unique // ID of the favorite review
  favoriteReview   Review? @relation("FavoriteReview", fields: [favoriteReviewId], references: [id])
  recentActivity   Json?  // Array of recent activity objects
  isAdmin      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  reviews      Review[]
  comments     Comment[]
  profileCommentsAuthored ProfileComment[] @relation("ProfileCommentAuthor")
  profileCommentsReceived ProfileComment[] @relation("ProfileCommentTarget")
}

model Review {
  id        Int      @id @default(autoincrement())
  title     String
  category  String
  creator   String
  year      Int
  rating    Int
  review    String
  date      DateTime
  imageUrl  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comments  Comment[]
  favoritedBy User? @relation("FavoriteReview")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model ProfileComment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  user      User     @relation("ProfileCommentAuthor", fields: [userId], references: [id])
  userId    Int
  profile   User     @relation("ProfileCommentTarget", fields: [profileId], references: [id])
  profileId Int
}
