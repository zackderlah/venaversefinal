generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                     @id @default(autoincrement())
  username                String                  @unique
  password                String
  isAdmin                 Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  email                   String                  @unique
  updatedAt               DateTime                @updatedAt
  profileImage            String?
  bio                     String?
  favoriteReviewId        Int?                    @unique
  recentActivity          Json?
  comments                Comment[]
  currentlyExperiencing   CurrentlyExperiencing[]
  profileCommentsReceived ProfileComment[]        @relation("ProfileCommentTarget")
  profileCommentsAuthored ProfileComment[]        @relation("ProfileCommentAuthor")
  reviews                 Review[]
  favoriteReview          Review?                 @relation("FavoriteReview", fields: [favoriteReviewId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  title       String
  category    String
  creator     String
  year        Int
  rating      Float
  review      String
  date        DateTime
  imageUrl    String?
  userId      Int
  comments    Comment[]
  user        User      @relation(fields: [userId], references: [id])
  favoritedBy User?     @relation("FavoriteReview")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  reviewId  Int
  userId    Int
  review    Review   @relation(fields: [reviewId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ProfileComment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  userId    Int
  profileId Int
  profile   User     @relation("ProfileCommentTarget", fields: [profileId], references: [id])
  user      User     @relation("ProfileCommentAuthor", fields: [userId], references: [id])
}

model CurrentlyExperiencing {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  type      String
  progress  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   String
  imageUrl  String?
  seasons   String?  @db.VarChar(191)
  year      String?  @db.VarChar(191)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
